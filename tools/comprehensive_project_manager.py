#!/usr/bin/env python3
"""
CodeStudio Pro Ultimate V2.1 - ÁªºÂêàÈ°πÁõÆÁÆ°ÁêÜÂ∑•ÂÖ∑
Êï¥ÂêàÊâÄÊúâÁÆ°ÁêÜÂäüËÉΩÁöÑÁªü‰∏ÄÂÖ•Âè£ÔºåÊèê‰æõÂÆåÊï¥ÁöÑÈ°πÁõÆÁÆ°ÁêÜËß£ÂÜ≥ÊñπÊ°à

ÁâàÊú¨: 1.0
‰ΩúËÄÖ: AI Assistant
ÂäüËÉΩ: Áªü‰∏ÄÁÆ°ÁêÜÂÖ•Âè£„ÄÅËá™Âä®ÂåñÊµÅÁ®ã„ÄÅÊä•ÂëäÁîüÊàê„ÄÅ‰∏ÄÈîÆÊìç‰Ωú
"""

import os
import sys
import json
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime

# ÂØºÂÖ•ÂêÑ‰∏™ÁÆ°ÁêÜÊ®°Âùó
try:
    from project_structure_optimizer import ProjectStructureOptimizer
    from code_management_system import CodeManagementSystem
    from functionality_integrity_validator import FunctionalityIntegrityValidator
    from risk_assessment_system import RiskIdentifier, EmergencyRollbackManager, MonitoringSystem
    from api_test_framework import run_full_tests
except ImportError as e:
    print(f"‚ö†Ô∏è Ë≠¶Âëä: ÈÉ®ÂàÜÊ®°ÂùóÂØºÂÖ•Â§±Ë¥• - {e}")

# ============================================================================
# ÁªºÂêàÈ°πÁõÆÁÆ°ÁêÜÂô®
# ============================================================================

class ComprehensiveProjectManager:
    """ÁªºÂêàÈ°πÁõÆÁÆ°ÁêÜÂô®"""

    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root).resolve()
        self.config_file = self.project_root / "config/project_management_config.json"

        # ÂàùÂßãÂåñÂêÑ‰∏™ÁÆ°ÁêÜÂô®
        try:
            self.structure_optimizer = ProjectStructureOptimizer(project_root)
            self.code_manager = CodeManagementSystem(project_root)
            self.integrity_validator = FunctionalityIntegrityValidator(project_root)
            self.risk_identifier = RiskIdentifier(project_root)
            self.rollback_manager = EmergencyRollbackManager(project_root)
            self.monitoring_system = MonitoringSystem(project_root)
        except Exception as e:
            print(f"‚ö†Ô∏è ÁÆ°ÁêÜÂô®ÂàùÂßãÂåñË≠¶Âëä: {e}")

        # Âä†ËΩΩÈÖçÁΩÆ
        self.config = self.load_config()

    def load_config(self) -> Dict[str, Any]:
        """Âä†ËΩΩÈ°πÁõÆÁÆ°ÁêÜÈÖçÁΩÆ"""
        default_config = {
            "auto_backup": True,
            "monitoring_enabled": True,
            "risk_assessment_frequency": "daily",
            "quality_check_enabled": True,
            "last_maintenance": None,
            "project_version": "2.1.0"
        }

        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    # ÂêàÂπ∂ÈªòËÆ§ÈÖçÁΩÆ
                    for key, value in default_config.items():
                        if key not in config:
                            config[key] = value
                    return config
            except:
                pass

        return default_config

    def save_config(self):
        """‰øùÂ≠òÈ°πÁõÆÁÆ°ÁêÜÈÖçÁΩÆ"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è ÈÖçÁΩÆ‰øùÂ≠òÂ§±Ë¥•: {e}")

    def run_comprehensive_check(self) -> Dict[str, Any]:
        """ËøêË°åÁªºÂêàÊ£ÄÊü•"""
        print("üîç ÊâßË°åÁªºÂêàÈ°πÁõÆÊ£ÄÊü•...")

        results = {
            "timestamp": datetime.now().isoformat(),
            "overall_status": "pass",
            "checks": {}
        }

        # 1. APIÂäüËÉΩÊµãËØï
        print("  üîó APIÂäüËÉΩÊµãËØï...")
        try:
            if 'run_full_tests' in globals():
                api_result = run_full_tests()
                results["checks"]["api_tests"] = {
                    "status": "pass" if api_result["summary"]["success_rate"] == 100 else "fail",
                    "details": api_result["summary"]
                }
            else:
                results["checks"]["api_tests"] = {
                    "status": "warning",
                    "details": {"message": "APIÊµãËØïÊ®°ÂùóÊú™ÂØºÂÖ•"}
                }
        except Exception as e:
            results["checks"]["api_tests"] = {
                "status": "error",
                "details": {"error": str(e)}
            }

        # 2. ÂäüËÉΩÂÆåÊï¥ÊÄßÈ™åËØÅ
        print("  ‚úÖ ÂäüËÉΩÂÆåÊï¥ÊÄßÈ™åËØÅ...")
        try:
            integrity_result = self.integrity_validator.validate_all_functionality()
            results["checks"]["functionality"] = {
                "status": integrity_result["overall_status"],
                "details": integrity_result["summary"]
            }
        except Exception as e:
            results["checks"]["functionality"] = {
                "status": "error",
                "details": {"error": str(e)}
            }

        # 3. È£éÈô©ËØÑ‰º∞
        print("  ‚ö†Ô∏è È£éÈô©ËØÑ‰º∞...")
        try:
            risk_result = self.risk_identifier.assess_all_risks()
            results["checks"]["risks"] = {
                "status": "pass" if risk_result["overall_risk_level"] in ["low", "medium"] else "warning",
                "details": {
                    "risk_level": risk_result["overall_risk_level"],
                    "total_risks": risk_result["total_risks"],
                    "risk_counts": risk_result["risk_counts"]
                }
            }
        except Exception as e:
            results["checks"]["risks"] = {
                "status": "error",
                "details": {"error": str(e)}
            }

        # 4. ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•
        print("  üìä ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•...")
        try:
            quality_result = self.code_manager.quality_checker.check_project_quality()
            results["checks"]["code_quality"] = {
                "status": "pass" if quality_result["average_score"] >= 80 else "warning",
                "details": {
                    "average_score": quality_result["average_score"],
                    "total_issues": quality_result["total_issues"],
                    "checked_files": quality_result["checked_files"]
                }
            }
        except Exception as e:
            results["checks"]["code_quality"] = {
                "status": "error",
                "details": {"error": str(e)}
            }

        # 5. Á≥ªÁªüÂÅ•Â∫∑Ê£ÄÊü•
        print("  üíì Á≥ªÁªüÂÅ•Â∫∑Ê£ÄÊü•...")
        try:
            health_result = self.monitoring_system.check_system_health()
            results["checks"]["system_health"] = {
                "status": health_result["overall_status"],
                "details": health_result["checks"]
            }
        except Exception as e:
            results["checks"]["system_health"] = {
                "status": "error",
                "details": {"error": str(e)}
            }

        # ËÆ°ÁÆóÊÄª‰ΩìÁä∂ÊÄÅ
        failed_checks = sum(1 for check in results["checks"].values() if check["status"] == "error")
        warning_checks = sum(1 for check in results["checks"].values() if check["status"] in ["warning", "fail"])

        if failed_checks > 0:
            results["overall_status"] = "error"
        elif warning_checks > 0:
            results["overall_status"] = "warning"

        print(f"‚úÖ ÁªºÂêàÊ£ÄÊü•ÂÆåÊàê: {results['overall_status']}")
        return results

    def run_maintenance_routine(self) -> Dict[str, Any]:
        """ËøêË°åÁª¥Êä§‰æãÁ®ã"""
        print("üîß ÊâßË°åÈ°πÁõÆÁª¥Êä§‰æãÁ®ã...")

        maintenance_results = {
            "timestamp": datetime.now().isoformat(),
            "operations": {}
        }

        # 1. ÂàõÂª∫Â§á‰ªΩ
        if self.config.get("auto_backup", True):
            print("  üíæ ÂàõÂª∫Ëá™Âä®Â§á‰ªΩ...")
            try:
                backup_result = self.rollback_manager.create_emergency_backup()
                maintenance_results["operations"]["backup"] = backup_result
            except Exception as e:
                maintenance_results["operations"]["backup"] = {"error": str(e)}

        # 2. ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•ÂíåÁª¥Êä§
        if self.config.get("quality_check_enabled", True):
            print("  üìä ‰ª£Á†ÅË¥®ÈáèÁª¥Êä§...")
            try:
                quality_result = self.code_manager.daily_maintenance()
                maintenance_results["operations"]["quality_maintenance"] = quality_result
            except Exception as e:
                maintenance_results["operations"]["quality_maintenance"] = {"error": str(e)}

        # 3. Á≥ªÁªüÂÅ•Â∫∑ÁõëÊéß
        if self.config.get("monitoring_enabled", True):
            print("  üíì Á≥ªÁªüÂÅ•Â∫∑ÁõëÊéß...")
            try:
                health_result = self.monitoring_system.check_system_health()
                maintenance_results["operations"]["health_check"] = health_result
            except Exception as e:
                maintenance_results["operations"]["health_check"] = {"error": str(e)}

        # 4. Ê∏ÖÁêÜÊóßÊñá‰ª∂
        print("  üßπ Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂...")
        try:
            cleanup_result = self._cleanup_temporary_files()
            maintenance_results["operations"]["cleanup"] = cleanup_result
        except Exception as e:
            maintenance_results["operations"]["cleanup"] = {"error": str(e)}

        # Êõ¥Êñ∞Áª¥Êä§Êó∂Èó¥
        self.config["last_maintenance"] = datetime.now().isoformat()
        self.save_config()

        print("‚úÖ Áª¥Êä§‰æãÁ®ãÂÆåÊàê")
        return maintenance_results

    def _cleanup_temporary_files(self) -> Dict[str, Any]:
        """Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂"""
        cleanup_patterns = [
            "*.tmp", "*.temp", "*.log", "*~", "*.bak",
            "__pycache__", "*.pyc", "*.pyo"
        ]

        cleaned_files = []
        cleaned_size = 0

        for pattern in cleanup_patterns:
            for file_path in self.project_root.rglob(pattern):
                try:
                    if file_path.is_file():
                        size = file_path.stat().st_size
                        file_path.unlink()
                        cleaned_files.append(str(file_path.relative_to(self.project_root)))
                        cleaned_size += size
                    elif file_path.is_dir() and pattern == "__pycache__":
                        import shutil
                        shutil.rmtree(file_path)
                        cleaned_files.append(str(file_path.relative_to(self.project_root)) + "/")
                except:
                    pass

        return {
            "cleaned_files": len(cleaned_files),
            "cleaned_size_mb": round(cleaned_size / (1024 * 1024), 2),
            "files": cleaned_files[:10]  # Âè™ÊòæÁ§∫Ââç10‰∏™
        }

    def generate_comprehensive_report(self) -> str:
        """ÁîüÊàêÁªºÂêàÈ°πÁõÆÊä•Âëä"""
        print("üìä ÁîüÊàêÁªºÂêàÈ°πÁõÆÊä•Âëä...")

        # ËøêË°åÁªºÂêàÊ£ÄÊü•
        check_results = self.run_comprehensive_check()

        report = f"""# CodeStudio Pro Ultimate V2.1 - ÁªºÂêàÈ°πÁõÆÊä•Âëä

ÁîüÊàêÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
È°πÁõÆÁâàÊú¨: {self.config.get('project_version', '2.1.0')}
È°πÁõÆË∑ØÂæÑ: {self.project_root}

## üìã ÊÄª‰ΩìÁä∂ÊÄÅ

**Áä∂ÊÄÅ**: {check_results['overall_status'].upper()}

## üîç Ê£ÄÊü•ÁªìÊûúËØ¶ÊÉÖ

"""

        # Ê£ÄÊü•ÁªìÊûúÁªüËÆ°
        status_icons = {
            "pass": "‚úÖ",
            "warning": "‚ö†Ô∏è",
            "fail": "‚ùå",
            "error": "üî¥"
        }

        for check_name, check_result in check_results["checks"].items():
            status = check_result["status"]
            icon = status_icons.get(status, "‚ùì")
            report += f"### {icon} {check_name.replace('_', ' ').title()}\n\n"
            report += f"**Áä∂ÊÄÅ**: {status}\n\n"

            if "details" in check_result:
                details = check_result["details"]
                if isinstance(details, dict):
                    for key, value in details.items():
                        if isinstance(value, (int, float, str)):
                            report += f"- **{key}**: {value}\n"

            report += "\n"

        # ÈÖçÁΩÆ‰ø°ÊÅØ
        report += "## ‚öôÔ∏è È°πÁõÆÈÖçÁΩÆ\n\n"
        for key, value in self.config.items():
            if key != "last_maintenance":
                report += f"- **{key}**: {value}\n"

        if self.config.get("last_maintenance"):
            last_maintenance = self.config["last_maintenance"][:19]
            report += f"- **last_maintenance**: {last_maintenance}\n"

        # Âª∫ËÆÆÂíå‰∏ã‰∏ÄÊ≠•
        report += "\n## üéØ Âª∫ËÆÆÂíå‰∏ã‰∏ÄÊ≠•\n\n"

        # Ê†πÊçÆÊ£ÄÊü•ÁªìÊûúÁîüÊàêÂª∫ËÆÆ
        if check_results["overall_status"] == "error":
            report += "- üö® **Á¥ßÊÄ•**: ÂèëÁé∞‰∏•ÈáçÈóÆÈ¢òÔºåÂª∫ËÆÆÁ´ãÂç≥Â§ÑÁêÜ\n"
        elif check_results["overall_status"] == "warning":
            report += "- ‚ö†Ô∏è **Ê≥®ÊÑè**: ÂèëÁé∞ÊΩúÂú®ÈóÆÈ¢òÔºåÂª∫ËÆÆÂèäÊó∂Â§ÑÁêÜ\n"
        else:
            report += "- ‚úÖ **ËâØÂ•Ω**: È°πÁõÆÁä∂ÊÄÅÊ≠£Â∏∏ÔºåÁªßÁª≠‰øùÊåÅ\n"

        report += "- üîÑ ÂÆöÊúüËøêË°åÁª¥Êä§‰æãÁ®ã\n"
        report += "- üìä ÁõëÊéßÈ°πÁõÆÂÅ•Â∫∑Áä∂ÊÄÅ\n"
        report += "- üíæ ‰øùÊåÅÂ§á‰ªΩ‰π†ÊÉØ\n"
        report += "- üìà ÊåÅÁª≠ÊîπËøõ‰ª£Á†ÅË¥®Èáè\n"

        return report

    def save_report(self, report: str, filename: str = None):
        """‰øùÂ≠òÊä•Âëä"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"comprehensive_project_report_{timestamp}.md"

        report_path = self.project_root / filename
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        print(f"üìÑ Êä•ÂëäÂ∑≤‰øùÂ≠ò: {report_path}")

    def quick_health_check(self) -> str:
        """Âø´ÈÄüÂÅ•Â∫∑Ê£ÄÊü•"""
        print("‚ö° Âø´ÈÄüÂÅ•Â∫∑Ê£ÄÊü•...")

        # Ê£ÄÊü•ÂÖ≥ÈîÆÊñá‰ª∂
        critical_files = [
            "src/core/codestudio_pro_ultimate.py",
            "src/web/codestudio_smart_launcher.html",
            "src/api/unified_api_clean.py"
        ]

        missing_files = []
        for file_path in critical_files:
            if not (self.project_root / file_path).exists():
                missing_files.append(file_path)

        # Ê£ÄÊü•APIÁä∂ÊÄÅ
        api_status = "unknown"
        try:
            if 'run_full_tests' in globals():
                api_result = run_full_tests()
                api_status = "ok" if api_result["summary"]["success_rate"] == 100 else "issues"
        except:
            api_status = "error"

        # ÁîüÊàêÂø´ÈÄüÊä•Âëä
        if missing_files:
            return f"üî¥ ÂÅ•Â∫∑Áä∂ÊÄÅ: ÂºÇÂ∏∏\nÁº∫Â∞ëÂÖ≥ÈîÆÊñá‰ª∂: {', '.join(missing_files)}"
        elif api_status == "error":
            return f"üü† ÂÅ•Â∫∑Áä∂ÊÄÅ: Ë≠¶Âëä\nAPIÊµãËØïÂ§±Ë¥•"
        elif api_status == "issues":
            return f"üü° ÂÅ•Â∫∑Áä∂ÊÄÅ: ÈÉ®ÂàÜÈóÆÈ¢ò\nAPIÈÉ®ÂàÜÂäüËÉΩÂºÇÂ∏∏"
        else:
            return f"üü¢ ÂÅ•Â∫∑Áä∂ÊÄÅ: ËâØÂ•Ω\nÊâÄÊúâÂÖ≥ÈîÆÁªÑ‰ª∂Ê≠£Â∏∏"

# ============================================================================
# ‰æøÊç∑ÂáΩÊï∞
# ============================================================================

def run_comprehensive_check(project_root: str = ".") -> Dict[str, Any]:
    """ËøêË°åÁªºÂêàÊ£ÄÊü•ÁöÑ‰æøÊç∑ÂáΩÊï∞"""
    manager = ComprehensiveProjectManager(project_root)
    return manager.run_comprehensive_check()

def run_maintenance_routine(project_root: str = ".") -> Dict[str, Any]:
    """ËøêË°åÁª¥Êä§‰æãÁ®ãÁöÑ‰æøÊç∑ÂáΩÊï∞"""
    manager = ComprehensiveProjectManager(project_root)
    return manager.run_maintenance_routine()

def generate_project_report(project_root: str = ".") -> str:
    """ÁîüÊàêÈ°πÁõÆÊä•ÂëäÁöÑ‰æøÊç∑ÂáΩÊï∞"""
    manager = ComprehensiveProjectManager(project_root)
    return manager.generate_comprehensive_report()

def quick_health_check(project_root: str = ".") -> str:
    """Âø´ÈÄüÂÅ•Â∫∑Ê£ÄÊü•ÁöÑ‰æøÊç∑ÂáΩÊï∞"""
    manager = ComprehensiveProjectManager(project_root)
    return manager.quick_health_check()

# ============================================================================
# ‰∏ªÂáΩÊï∞
# ============================================================================

if __name__ == "__main__":
    print("üöÄ CodeStudio Pro Ultimate V2.1 - ÁªºÂêàÈ°πÁõÆÁÆ°ÁêÜÂ∑•ÂÖ∑")
    print("=" * 60)

    manager = ComprehensiveProjectManager()

    print("ÈÄâÊã©Êìç‰Ωú:")
    print("1. Âø´ÈÄüÂÅ•Â∫∑Ê£ÄÊü•")
    print("2. ÁªºÂêàÈ°πÁõÆÊ£ÄÊü•")
    print("3. ËøêË°åÁª¥Êä§‰æãÁ®ã")
    print("4. ÁîüÊàêÁªºÂêàÊä•Âëä")
    print("5. È°πÁõÆÈÖçÁΩÆÁÆ°ÁêÜ")

    choice = input("ËØ∑ËæìÂÖ•ÈÄâÊã© (1-5): ").strip()

    if choice == "1":
        result = manager.quick_health_check()
        print(f"\n{result}")

    elif choice == "2":
        result = manager.run_comprehensive_check()
        print(f"\nüîç ÁªºÂêàÊ£ÄÊü•ÂÆåÊàê: {result['overall_status']}")

    elif choice == "3":
        result = manager.run_maintenance_routine()
        print(f"\nüîß Áª¥Êä§‰æãÁ®ãÂÆåÊàê")

    elif choice == "4":
        report = manager.generate_comprehensive_report()
        print("\n" + report)
        manager.save_report(report)

    elif choice == "5":
        print(f"\n‚öôÔ∏è ÂΩìÂâçÈÖçÁΩÆ:")
        for key, value in manager.config.items():
            print(f"  {key}: {value}")

        print("\nÂèØ‰øÆÊîπÁöÑÈÖçÁΩÆÈ°π:")
        print("- auto_backup (True/False)")
        print("- monitoring_enabled (True/False)")
        print("- quality_check_enabled (True/False)")

        config_key = input("Ë¶Å‰øÆÊîπÁöÑÈÖçÁΩÆÈ°π (ÂõûËΩ¶Ë∑≥Ëøá): ").strip()
        if config_key and config_key in manager.config:
            new_value = input(f"Êñ∞ÂÄº (ÂΩìÂâç: {manager.config[config_key]}): ").strip()
            if new_value.lower() in ['true', 'false']:
                manager.config[config_key] = new_value.lower() == 'true'
                manager.save_config()
                print("‚úÖ ÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞")

    else:
        print("‚ùå Êó†ÊïàÈÄâÊã©")
