# CodeStudio Pro Ultimate 3.0 - Docker Compose配置
version: '3.8'

services:
  # API网关
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - api-gateway-logs:/app/logs
    networks:
      - codestudio-network
    depends_on:
      - instance-service
      - resource-service
      - user-service
      - collaboration-service
      - config-service
    restart: unless-stopped

  # 实例管理服务
  instance-service:
    build:
      context: ./services/instance-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    volumes:
      - instance-service-logs:/app/logs
      - instance-service-data:/app/data
    networks:
      - codestudio-network
    restart: unless-stopped

  # 资源管理服务
  resource-service:
    build:
      context: ./services/resource-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
    volumes:
      - resource-service-logs:/app/logs
      - resource-service-data:/app/data
    networks:
      - codestudio-network
    restart: unless-stopped

  # 用户管理服务
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
    volumes:
      - user-service-logs:/app/logs
      - user-service-data:/app/data
    networks:
      - codestudio-network
    restart: unless-stopped

  # 协同服务
  collaboration-service:
    build:
      context: ./services/collaboration-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
    volumes:
      - collaboration-service-logs:/app/logs
      - collaboration-service-data:/app/data
    networks:
      - codestudio-network
    restart: unless-stopped

  # 配置管理服务
  config-service:
    build:
      context: ./services/config-service
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
      - "3006:3006"  # 热更新端口
    environment:
      - NODE_ENV=production
      - PORT=3005
      - HOT_RELOAD_PORT=3006
    volumes:
      - config-service-logs:/app/logs
      - config-service-data:/app/data
    networks:
      - codestudio-network
    restart: unless-stopped

  # 监控服务
  monitoring-service:
    build:
      context: ./services/monitoring-service
      dockerfile: Dockerfile
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=production
      - PORT=3008
      - LOG_DIR=/app/logs
    volumes:
      - monitoring-service-logs:/app/logs
      - monitoring-service-data:/app/data
    networks:
      - codestudio-network
    restart: unless-stopped

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./services/monitoring-service/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./services/monitoring-service/config/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - codestudio-network
    restart: unless-stopped

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3007:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - ./services/monitoring-service/config/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./services/monitoring-service/config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana-data:/var/lib/grafana
    networks:
      - codestudio-network
    depends_on:
      - prometheus
    restart: unless-stopped

# 网络配置
networks:
  codestudio-network:
    driver: bridge

# 数据卷配置
volumes:
  api-gateway-logs:
  instance-service-logs:
  instance-service-data:
  resource-service-logs:
  resource-service-data:
  user-service-logs:
  user-service-data:
  collaboration-service-logs:
  collaboration-service-data:
  config-service-logs:
  config-service-data:
  monitoring-service-logs:
  monitoring-service-data:
  prometheus-data:
  grafana-data:
